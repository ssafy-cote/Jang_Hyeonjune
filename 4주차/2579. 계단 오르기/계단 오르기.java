import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

/*
 * 백주 2579 계단오르기
 * 
 * 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다.
 * 각각의 계단에는 일정한 점수가 쓰여 있는데 계단을 밟으면 그 계단에 쓰여 있는
 * 점수를 얻게 된다.
 * 
 * 계단을 오르는데 다음과 같은 규칙이 있다.
1. 계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
2. 연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
3. 마지막 도착 계단은 반드시 밟아야 한다.
 * 
 * 따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다.
 * 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째,
 * 세 번째 계단을 연속해서 모두 밟을 수는 없다.
 * 
 * 각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값을
 * 구하는 프로그램을 작성하시오.
 * 
 * @입력
 * 입력의 첫째 줄에 계단의 개수가 주어진다.
 * 둘째 줄부터 한줄에 하나씩 제일 아래에 놓인 계단부터 순서대로 각 계단에 쓰여있는
 * 점수가 주어진다.
 * 계단의 개수는 300이하의 자연수이고, 계단에 쓰여 있는 점수는 10,000이하의 자연수이다.
 * 
 * @출력
 * 첫째 줄에 계단에 오르기 게임에서 얻을 수 있는 총 점수의 최댓값을 출력한다.
 * 
 * @해결방안
 * 각 계단에서의 최댓값을 구하자! 도착지점에서 갈수 있는 최대 점수를 하나씩 해보자.
 * 그냥 더하면 안되고, 전과 전전을 비교하여 더 큰 값만 저장.
 * 
 * @답안지
 * 마지막 계단을 무조건 밟아야하다면 두 가지로 분류(마지막 칸이 n이라면)
 * 1. 전칸을 밟고 마지막칸을 밟는 경우
 * n-1 + n 과 3연속으로 3칸을 밟을수 없기 때문에 n-3 + n-1 + n
 * 2. 전전칸을 밟고 마지막칸을 밟는 경우
 * n-2 + n
 * 
 * 구현은 stair[301], dp[301]에 배열에 저장
 * dp배열에는 i번째 계단까지 최대값을 저장해놓는 배열이고, stair배열은 문제에서 주어지는
 * 점수를 저장하는 배열이다.
 * 
 * 전전칸을 밟고 현재칸을 밟는경우 -> 전전칸까지의 최대값 + 현재칸
 * 전전전 칸을 밟고 전칸을 밟고 현재칸을 밟는 경우 -> 전전전칸까지의 최대값 + 전칸 + 현재칸
 * 
 * 이러한 규칙을 바탕으로 i=0 ~ n-1까지 돌리면 dp 배열의 n-1번째 배열에는 최대값이
 * 저장되는 것을 알 수 있다.
 * 
 * 하지만 for문을 통해 i=0 부터 돌리게되면 dp[i-3]에서 i값이 음수값으로 나오는
 * 것을 알 수 있다. 그럼 i=3부터 돌려야하고 dp[0]~dp[2]는 조건에 맞게 넣어주어야한다.
 * 
 * dp[0]일 경우는 1칸을 갔을 경우
 * -> 1칸을 가기위해서는 단 하나의 경우만 있다.
 * 
 * dp[1]일 경우 2칸을 갔을 경우이다.
 * -> 2칸을 가기위해서는 1칸+1칸을 갔을 경우와 한번에 2칸을 갔을 경우로 나뉜다.
 *    이 두 경우 중 최대값을 저장한다.
 * 
 * dp[2]일 경우는 3칸을 갔을 경우이다.
 * -> 3칸을 가기위해서는 1칸+2칸을 갔을 경우와 2칸 + 1칸을 갔을 경우로 나뉠 수 있따.
 * 이 두 경우 중 최대값을 저장한다.
 * 
 */

public class Main {

	public static void main(String[] args) throws NumberFormatException, IOException {
		// TODO Auto-generated method stub

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		
		int[] arr = new int[301];
		int[] dp = new int[301]; 
		
		for (int i = 0; i < N; i++) {
			arr[i] = Integer.parseInt(br.readLine());
		}
		
		// 1칸만 갔을 경우
		dp[0] = arr[0];
		
		// 2칸을 갔을 경우 : 1+1, 2
		dp[1] = Math.max(arr[0] + arr[1], arr[2]);
		
		// 3칸을 갔을 경우 : 1+2, 2+1
		dp[2] = Math.max(arr[0] + arr[2], arr[1] + arr[2]);
		
		for (int i = 3; i < N; i++) {
			// n-2 + n : 전전칸에서 오는경우 => 전전값의 최댓값과 자신
			// n-3 + n-1 + n : 전칸에서 오는 경우 => 전전전값의 최댓값과 이전 값과 자신
			dp[i] = Math.max(dp[i-2] + arr[i], dp[i-3] + arr[i-1] + arr[i]);
		}
		
		System.out.println(dp[N-1]);
	}

}